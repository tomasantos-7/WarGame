<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>terrain generation</title>
    <script>
        let MAP_WIDTH = 100;
        let MAP_HEIGHT = 100;
        let CELL_WIDTH = 32;
        let CELL_HEIGHT = 32;
        //cria um array de arrays, com o tamanho (MAP_WIDTH x MAP_HEIGHT) tudo inicializado a 0;
        let map = new Array(MAP_WIDTH).fill(0).map(() => new Array(MAP_HEIGHT).fill(0));
        function setup()
        {
            //make html reflect hour variables co we have only 1 place to alter
            const canvas = document.getElementById("ui_map");
            canvas.setAttribute("width", MAP_WIDTH * CELL_WIDTH);
            canvas.setAttribute("height", MAP_HEIGHT * CELL_HEIGHT);
            initializeTerrain();
            drawGrayscale()//para debug
            drawTexture()
            drawScenery()
        }
        //** terrain generation functions
        function initializeTerrain()
        {
            //imaginando que o terreno está tudo a nivel da agua, a cada iteração vamos elevar uma pequena ilha de forma redonda, num local aleatório 
            for (let i = 0; i < 100; i++)
            {
                let center_x = Math.floor(Math.random() * MAP_WIDTH);
                let center_y = Math.floor(Math.random() * MAP_HEIGHT);
                elevateTerrain(0.1, center_x, center_y, 10)
            }
            console.log(map);
        }
        function elevateTerrain(amount, center_x, center_y, radius)
        {
            for (let x = 0; x < MAP_WIDTH; x++)
                for (let y = 0; y < MAP_WIDTH; y++)
                {
                    //distancia ao centro do circulo com o teorema de pitágoras
                    let delta_x = x - center_x;
                    let delta_y = y - center_y;
                    let distance = Math.sqrt(Math.pow(delta_x, 2) + Math.pow(delta_y, 2));
                    if (distance > radius)//esta celula está fora do circulo
                        continue;
                    map[x][y] += amount;
                }
        }
        function drawTexture()
        {
            const canvas = document.getElementById("ui_map");
            const ctx = canvas.getContext("2d");

            const texture = document.getElementById("texture");//get the texture image
            ctx.fillStyle = ctx.createPattern(texture, "repeat");//set as fill
            ctx.fillRect(0, 0, MAP_WIDTH * CELL_WIDTH, MAP_HEIGHT * CELL_HEIGHT);
        }
        function drawScenery()
        {
            const canvas = document.getElementById("ui_map");
            const ctx = canvas.getContext("2d");
            const tree_parent = document.getElementById('trees')
            const hill_parent = document.getElementById('hills')
            const pine_parent = document.getElementById('pines')
            /* texture map
            0.0 < plains < 0.3
            0.3 < trees < 0.4
            0.4 < plains < 0.5
            0.5 < pines < 0.6
            0.6 < plains < 0.7
            0.7 < hills < 1.0
            */
            for (let x = 0; x < MAP_WIDTH; x++)
                for (let y = 0; y < MAP_WIDTH; y++)
                {
                    let height = map[x][y];
                    let texture_parent = null;
                    if (height < 0.3)
                        continue
                    else if (height < 0.4)
                        texture_parent = tree_parent
                    else if (height < 0.5)
                        continue
                    else if (height < 0.6)
                        texture_parent = pine_parent
                    else if (height < 0.7)
                        continue
                    else//hills
                        texture_parent = document.getElementById('hills')//this element contains <img> childs that are the ones that we want for trees

                    let list_of_images = texture_parent.children;
                    var chosen_index = Math.floor(Math.random() * list_of_images.length);
                    var chosen = list_of_images[chosen_index];
                    ctx.drawImage(chosen, x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);
                }
        }
        //**debug draw
        function drawGrayscale()
        {
            const canvas = document.getElementById("ui_map");
            const ctx = canvas.getContext("2d");
            for (let x = 0; x < MAP_WIDTH; x++)
                for (let y = 0; y < MAP_WIDTH; y++)
                {
                    ctx.fillStyle = `rgb(0 0 0 / ${map[x][y] * 100}%)`;
                    ctx.fillRect(x * CELL_WIDTH, y * CELL_HEIGHT, CELL_WIDTH, CELL_HEIGHT);
                }
        }

    </script>
</head>

<body id="dump" onload="setup()">
    <canvas id="ui_map" width="1000" height="1000"></canvas>
    <div style="display: none;">
        <img id="texture" src="../assets/scroll.png">
        <!--this element contains <img> childs that are a collection of alternate textures-->
        <div id="trees">
            <img id="Tree1" src="../assets/Tree1.png">
            <img id="Tree2" src="../assets/Tree2.png">
            <img id="Tree3" src="../assets/Tree3.png">
            <img id="Tree4" src="../assets/Tree4.png">
        </div>
        <div id="pines">
            <img id="Pine1" src="../assets/Pine1.png">
            <img id="Pine2" src="../assets/Pine2.png">
            <img id="Pine3" src="../assets/Pine3.png">
        </div>
        <div id="hills">
            <img id="Hill1" src="../assets/Hill1.png">
            <img id="Hill2" src="../assets/Hill2.png">
            <img id="Hill3" src="../assets/Hill3.png">
        </div>
    </div>
</body>

</html>